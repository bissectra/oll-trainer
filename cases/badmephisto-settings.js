//.This is Badmephisto set of Algs and Orientations
var algs = [];
if (localStorage.getItem('algs') == undefined){
  algs[ 0] = "F (R U R' U') F'";
  algs[ 1] = "F (R U R' U') (R U R' U') F'";
  algs[ 2] = "F (R U R' U') (R U R' U') (R U R' U') F'";
  algs[ 3] = "f (R U R' U') f'";
  algs[ 4] = "f (R U R' U') (R U R' U') f'";
  algs[ 5] = "f ' (L' U' L U) f";
  algs[ 6] = "F' (L' U' L U) (L' U' L U) F";
  algs[ 7] = "[F (R U R' U') F'] U [F (R U R' U') F' ]";
  algs[ 8] = "[F' (L' U' L U) F] y [F (R U R' U') F']";
  algs[ 9] = "[f (R U R' U') f'] U [F (R U R' U') F' ]";
  algs[10] = "[f (R U R' U') f'] U' [F (R U R' U') F' ]";
  algs[11] = "[F (R U R' U') F' ] [f (R U R' U') f']";
  algs[12] = "[f (R U R' U') f'] [F (R U R' U') F']";
  algs[13] = "(r U r') (R U R' U') (r U' r')";
  algs[14] = "(l' U' l) (L' U' L U) (l' U l)";
  algs[15] = "R' [F (R U R' U') F'] U R";
  algs[16] = "(R U R' U') M' (U R U' r')";
  algs[17] = "M U (R U R' U') M2 (U R U' r')";
  algs[18] = "F (R U R' U') R F' (r U R' U') r'";
  algs[19] = "(R U R' U') (R' F R F')";
  algs[20] = "(r U R' U') (r' F R F')";
  algs[21] = "F' (r U R' U') (r' F R )";
  algs[22] = "R' U' (R' F R F') U R";
  algs[23] = "(R U2 R') (R' F R F') U2 (R' F R F')";
  algs[24] = "(R U2 R') (R' F R F') (R U2 R')";
  algs[25] = "M U (R U R' U') M' (R' F R F')";
  algs[26] = "(R' F R' F') R2 U2 y (R' F R F')";
  algs[27] = "(R U R' U) (R U' R' U') (R' F R F')";
  algs[28] = "(L' U' L U') (L' U L U) (L F' L' F)";
  algs[29] = "(R U R' U) R d' R U' R' F'";
  algs[30] = "(R U R' U) (R' F R F') U2 (R' F R F')";
  algs[31] = "[F (R U R' U) F'] y' U2 (R' F R F')";
  algs[32] = "r' U2 (R U R' U) r";
  algs[33] = "(r U R' U) R U2 r'";
  algs[34] = "(R U R' U) R U2 R'";
  algs[35] = "R U2 R' U' R U' R'";
  algs[36] = "[ R' U2 (R U R' U) R] y [F (R U R' U') F']";
  algs[37] = "[(R U R' U) R U2 R'] [F (R U R' U') F']";
  algs[38] = "(r U R' U) (R U' R' U) R U2' r'";
  algs[39] = "l' U' L U' L' U L U' L' U2 l";
  algs[40] = "r U2 R' U' R U' r'";
  algs[41] = "F R U' R' U' R U R' F'";
  algs[42] = "r' U' R U' R' U2 r";
  algs[43] = "M' U M U2 M' U M";
  algs[44] = "(R U R2 U') (R' F) (R U) (R U') F'";
  algs[45] = "F U R U' R2 F' R (U R U' R')";
  algs[46] = "R' F R U R' F' R y' (R U' R')";
  algs[47] = "R2 [D (R' U2) R] [D' (R' U2) R']";
  algs[48] = "R' U2 R2 U R' U R U2 x' U' R' U";
  algs[49] = "R U B' U' R' U R B R'";
  algs[50] = "R' U' F U R U' R' F' R";
  algs[51] = "R B' R' U' R U B U' R'";
  algs[52] = "R' F R2 B' R2' F' R2 B R'";
  algs[53] = "(R U R' U') R U' R' F' U' F (R U R')";
  algs[54] = "(R2 U R' B' R) U' (R2 U R B R')";
  algs[55] = "(R' U' R) y' x' (R U') (R' F) (R U R')";
  algs[56] = "R U R' y R' F R U' R' F' R";
  localStorage.setItem('algs', JSON.stringify(algs));
} else {
  algs = JSON.parse(localStorage.getItem('algs'));
}

var algs_ = [];
if (localStorage.getItem("algs_") == undefined){
  algs_[ 2] = "y (R' U' R) U' (R' U R) U' (R' U2 R)";
  algs_[ 8] = "y (r U R' U)(R' F R F') R U2 r'";
  algs_[12] = "R U2' R2' U' R2 U' R2' U2 R";
  algs_[29] = "(R' U' R U') R' d R' U R B";
  algs_[36] = "(R' F R F') (R' F R F') (R U R' U')(R U R')";
  algs_[39] = "y2 r' U' R U' R' U R U' R' U2 r";
  algs_[44] = "(R U R' U') x D' R' U R U' D x'";
  algs_[49] = "R d L' d' R' U R B R'";
  algs_[50] = "y2 L' d' R d L U' L' B' L";
  algs_[51] = "y2 L F' (L' U' L U) F U' L'";
  algs_[53] = "[F (R U R' U') F'] U2 [(R U R' U') (R' F R F')]";
  algs_[55] = "(R U R' U') R' F R2 U R' U' F'";
  algs_[56] = "(R U R' U) (R' F R F') R U2 R'";
  localStorage.setItem('algs_', JSON.stringify(algs_));
} else {
  algs_ = JSON.parse(localStorage.getItem("algs_"));
}

var orientation = [];
if (localStorage.getItem('orientation') == undefined){
  orientation[ 0] = [1, 1, 0, 0, 0, 1, 2, 0];
  orientation[ 1] = [1, 0, 1, 1, 2, 1, 2, 0];
  orientation[ 2] = [2, 0, 1, 0, 2, 0, 1, 0];
  orientation[ 3] = [1, 1, 0, 0, 0, 0, 2, 1];
  orientation[ 4] = [1, 1, 1, 0, 2, 1, 2, 0];
  orientation[ 5] = [0, 1, 2, 1, 1, 0, 0, 0];
  orientation[ 6] = [2, 0, 2, 0, 1, 0, 1, 1];
  orientation[ 7] = [1, 1, 0, 0, 1, 0, 1, 0];
  orientation[ 8] = [0, 1, 2, 1, 2, 0, 2, 1];
  orientation[ 9] = [1, 1, 0, 1, 1, 1, 1, 1];
  orientation[10] = [2, 1, 2, 1, 0, 1, 2, 1];
  orientation[11] = [1, 1, 1, 1, 2, 1, 2, 1];
  orientation[12] = [1, 0, 1, 0, 2, 0, 2, 0];
  orientation[13] = [1, 1, 0, 0, 1, 1, 1, 0];
  orientation[14] = [0, 1, 2, 0, 2, 1, 2, 0];
  orientation[15] = [0, 1, 1, 0, 0, 1, 2, 0];
  orientation[16] = [0, 1, 0, 0, 0, 1, 0, 0];
  orientation[17] = [0, 1, 0, 1, 0, 1, 0, 1];
  orientation[18] = [1, 1, 2, 0, 1, 1, 2, 0];
  orientation[19] = [2, 1, 0, 0, 0, 1, 1, 0];
  orientation[20] = [2, 0, 0, 0, 0, 0, 1, 0];
  orientation[21] = [1, 0, 0, 0, 2, 0, 0, 0];
  orientation[22] = [0, 0, 2, 1, 1, 0, 0, 1];
  orientation[23] = [1, 1, 2, 1, 1, 1, 2, 1];
  orientation[24] = [0, 1, 2, 0, 0, 0, 1, 1];
  orientation[25] = [0, 1, 0, 1, 1, 1, 2, 1];
  orientation[26] = [1, 0, 1, 0, 2, 1, 2, 1];
  orientation[27] = [2, 0, 0, 1, 1, 1, 0, 0];
  orientation[28] = [0, 0, 1, 0, 0, 1, 2, 1];
  orientation[29] = [2, 0, 2, 1, 1, 0, 1, 1];
  orientation[30] = [0, 1, 1, 1, 0, 1, 2, 1];
  orientation[31] = [2, 1, 1, 1, 0, 1, 0, 1];
  orientation[32] = [2, 1, 2, 0, 0, 0, 2, 1];
  orientation[33] = [2, 0, 2, 1, 2, 1, 0, 0];
  orientation[34] = [2, 0, 2, 0, 2, 0, 0, 0];
  orientation[35] = [1, 0, 0, 0, 1, 0, 1, 0];
  orientation[36] = [1, 0, 0, 1, 0, 1, 2, 0];
  orientation[37] = [2, 0, 1, 1, 0, 1, 0, 0];
  orientation[38] = [1, 0, 2, 0, 1, 1, 2, 1];
  orientation[39] = [1, 0, 2, 1, 1, 1, 2, 0];
  orientation[40] = [1, 0, 0, 0, 1, 1, 1, 1];
  orientation[41] = [0, 0, 2, 1, 0, 1, 1, 0];
  orientation[42] = [0, 1, 1, 1, 1, 0, 1, 0];
  orientation[43] = [0, 1, 0, 0, 0, 0, 0, 1];
  orientation[44] = [1, 1, 2, 0, 0, 1, 0, 0];
  orientation[45] = [2, 1, 2, 0, 2, 1, 0, 0];
  orientation[46] = [1, 1, 1, 0, 0, 1, 1, 0];
  orientation[47] = [0, 0, 0, 0, 2, 0, 1, 0];
  orientation[48] = [1, 0, 2, 1, 1, 0, 2, 1];
  orientation[49] = [2, 1, 0, 0, 0, 0, 1, 1];
  orientation[50] = [2, 0, 0, 0, 0, 1, 1, 1];
  orientation[51] = [1, 1, 0, 0, 2, 1, 0, 0];
  orientation[52] = [2, 0, 2, 1, 1, 1, 1, 0];
  orientation[53] = [2, 0, 0, 1, 0, 1, 1, 0];
  orientation[54] = [0, 1, 0, 0, 1, 0, 2, 1];
  orientation[55] = [1, 0, 1, 1, 0, 1, 1, 0];
  orientation[56] = [2, 1, 0, 1, 2, 0, 2, 0];
  localStorage.setItem('orientation', JSON.stringify(orientation));
} else {
  orientation = JSON.parse(localStorage.getItem('orientation'));
}

var comments = [];
if (localStorage.getItem('comments') == undefined){
  comments[0] = "Simplest OLL of them all";
  comments[1] = "Just repeat the trigger one more time";
  comments[2] = "Just repeat the trigger 3 times. The second one is the one I use, its much faster";
  comments[3] = "Instead of F F' you now have f and f '";
  comments[4] = "Just repeat the RUR'U' trigger 2 times";
  comments[5] = "This is the reflection of P. You are just doing the algorithm with your left hand. It should be quiet easy to transfer it with just a little bit of practice.I execute it more like f' L' U' L U y' r";
  comments[6] = "This is reflection of Case 2. Just do the trigger twice.";
  comments[7] = "This is just T, twice, with a U in between.";
  comments[8] = "Reflection of case 1 followed by case 1, with a y rotation in between, and it comes very natural in that position I find. Second algorithm was suggested to me and I kinda like it.";
  comments[9] = "This is just case 4 followed by case 1, with a U in between";
  comments[10] = "This is case 10 with a U' instead of U";
  comments[11] = "This is T (case 1) followed by P (case 4)";
  comments[12] = "This is just like the above, but T (case 1) and P (case 4) are done in reverse order! You should really learn the second algorithm though, its much faster. Its the one everyone fast uses too.";
  comments[13] = "This algorithm is very easy to remember";
  comments[14] = "This algorithm is very easy to remember";
  comments[15] = "Look how neatly case 1 (T) is placed in middle there :)";
  comments[16] = "I find this one pretty easy to remember too and it flows very nicely. It doesn't come up too often though";
  comments[17] = "This almost never comes up, so skip it if you want. But its not too bad. Note the last part is the same as in case 17.";
  comments[18] = "This almost never comes up, so skip it if you want. But its not too bad. Note the last part is the same as in case 17.";
  comments[19] = "Just the two triggers is all it takes :)";
  comments[20] = "Same as T2 (case 20) but the first R's are actually double layer R turn (r)";
  comments[21] = "Same as chameleon (case 21) , with the last F' moved to the front!";
  comments[22] = "There are some setup moves involved here. Note how U R \"undoes\" the R' U' you do in beginning";
  comments[23] = "The R' R' is obviously made as a giant R2 in the actual execution";
  comments[24] = "Incredibly easy to remember, and fast to execute. Again, the R' R' is made as a big R2. Note first part is the same as in case 24";
  comments[25] = "pretty easy to remember. Also note how similar this algorithm is to case 17";
  comments[26] = "Be warned that the first trigger is not really R'FRF' trigger. But almost... the second R turn in it is R', not R";
  comments[27] = "Very quick to perform. Second part is same as first, but with U's instead of Us";
  comments[28] = "The reflection. Should be easy enough to mirror it.";
  comments[29] = "I use the first one, but both are very good, and its definitely a judgement call per individual";
  comments[30] = "Easy to remember. Note similarity to case 24.";
  comments[31] = "Easy. This is ALMOST case #1, but with that modified trigger. I execute this by doing y' R' U2 instead of the F' y' U2. But thats a detail.";
  comments[32] = "Easy.";
  comments[33] = "slight variation of the trigger and then easy finish";
  comments[34] = "Very quick OLL. Look what happens to one of the F2L pairs as you execute it. The whole algorithm is just: Take out a pair, move it over, insert it back. It's also very similar to case 34";
  comments[35] = "This algorithm is the same as case 35 in philosophy. Track the F2L pair.";
  comments[36] = "This algorithm is the same as case 35 in philosophy. Track the F2L pair. The second algorithm was suggested to me by someone, and I kinda like it even more! To do the R'FRF' parts, I actually make a cube rotation x and then execute them as R'URU'.";
  comments[37] = "This is basically the Sune followed by the T(case 1)";
  comments[38] = "Incredibly quick to execute. I love this algorithm. When you execute it, it feels like the two fingers on right and left hand are in battle, flicking towards each other the top layer like crazy :)";
  comments[39] = "I execute one or the other depending on which angle I run into the OLL in. It saves me a y2 rotation. First one is just reflection of case 39.";
  comments[40] = "quick alg. Note how similar it is to 36! Just replace R->r. Uncanny!";
  comments[41] = "very quick. Note the Y permutation starts with this exactly";
  comments[42] = "quick, and very similar to sunes (cases 34-38)";
  comments[43] = "easy. Look what happens to one of the cross edges. You take it out, do a U2, and put it back from the other side.";
  comments[44] = "I cannot decide which one is better... you have to pick for yourself";
  comments[45] = "note how the last part just inserts an F2L pair back.";
  comments[46] = "pretty nice alg. Last part just inserts F2L pair";
  comments[47] = "I don't like this alg too much. Note the repeating structure.";
  comments[48] = "... i don't like this one too much";
  comments[49] = "The B' is very clumsily done. Try do it with your thumb, then the rest is very quick. I use the second algorithm, but I'm not sure which one is better";
  comments[50] = "I use the second one, but I think the first may be a little better.";
  comments[51] = "Try to use the thumb for the B' too, i think. Pretty clumsy as well, but after it its quick";
  comments[52] = "Again, I do the B' with my thumb. Awkward alg. ew.";
  comments[53] = "flows nicely, no regrips. The second one is longer but easier to remember: It is just case 1 followed by U2 and case 20!";
  comments[54] = "Ok the first R2 is executed in a weird way. You overgrip the R slice to do the R2 both times. After doing the R2's you have to be able to the U with a finger flick without a regrip. The alg is actually quite fast.";
  comments[55] = "after the ugly y'x' the alg is incredibly fast. I love executing that part. I give a second alternative in case someone wants something else because they dont like the rotation. (Note that the second alg looks very much like the T PLL :) )";
  comments[56] = "I try to use the first one. The second one was suggested to me and its incredibly easy to memorize, but I don't think its AS fast as say the first one.";
  localStorage.setItem('comments', JSON.stringify(comments));
} else {
    comments = JSON.parse(localStorage.getItem('comments'));
}
